title: Liskov principle violation via complete domain change
description: >
 Here the defect manifests in method g of object child that redefines method g of object parent.
 The method strengthens the preconditions of the original method. 
features:
  - inheritance
  - overriding
  - method
  - polymorphism
bad:
  source.cpp: |
    #include <cassert>

    class Parent {
    public:
        virtual int g(int y) {
            return y;
        }
        int h(int z) {
            return z;
        }

        virtual ~Parent() = default;
    };

    class Child : public Parent {
    public:
        int g(int x) override {
            int y = x - 5;
            assert(0 < y);
            return y;
        }
    };

    auto main() -> int {
        Child* p = new Child();
        p->g(10);
        delete p;
    }
  Test.java: |
    class Parent {
        public int g(int y) {
            return y;
        }
        public int h(int z) {
            return z;
        }
    }

    class Child extends Parent {
        @Override
        public int g(int x) {
            int y = x - 5;
            assert 0 < y;
            return y;
        }
    }

    public class Test {
        public static void main(String[] args) {
            Parent childInstance = new Child();
            childInstance.g(10);
        }
    }
  test.eo: |
    [] > test
      [] > parent
        [self y] > g
          y > @
        [self z] > h
          z > @
      [] > child
        parent > @
        [self x] > g
          x.sub 5 > y1
          seq > @
            assert (0.less y1)
            y1
  test.py: |
    class Parent:
    def g(self, y):
        return y

    def h(self, z):
        return z


    class Child(Parent):
        def g(self, x):
            y = x - 5
            assert 0 < y
            return y
    
    
    if __name__ == "__main__":
        p = Child()
        p.g(10)
good:
  source.cpp: |
    #include <cassert>

    class Parent {
    public:
        virtual int g(int y) {
            return y;
        }
        int h(int z) {
            return z;
        }

        virtual ~Parent() = default;
    };

    class Child : public Parent {
    public:
        int g(int x) override {
            return x - 5;
        }
    };

    auto main() -> int {
        Child* p = new Child();
        p->g(10);
        delete p;
    }
  Test.java: |
    class Parent {
        public int g(int y) {
            return y;
        }
        public int h(int z) {
            return z;
        }
    }

    class Child extends Parent {
        @Override
        public int g(int x) {
            return x - 5;
        }
    }

    public class Test {
        public static void main(String[] args) {
            Parent childInstance = new Child();
            childInstance.g(10);
        }
    }
  test.eo: |
    [] > test
      [] > parent
        [self y] > g
          y > @
        [self z] > h
          z > @
      [] > child
        parent > @
        [self x] > g
          x.sub 5 > @
            
  test.py: |
    class Parent:
    def g(self, y):
        return y

    def h(self, z):
        return z


    class Child(Parent):
        def g(self, x):
            return x - 5
    
    
    if __name__ == "__main__":
        p = Child()
        p.g(10)
