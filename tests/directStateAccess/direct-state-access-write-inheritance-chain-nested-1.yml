title: Direct access(write) to the base class state in a chain of inheritance in nested classes
description: >
  Here, direct access(write) to the base class state occurs through 
  the inheritance chain, in which the access to the field of the base class
  occurs in the last element of the inheritance chain. the inheritance chain 
  is in the innermost element of the nested class chain.
features:
  - inheritance
  - nested
  - encapsulation
  - method
bad:
  source.cpp: |
    class VeryOuter {
    public:
        class Outer {
        public:
            class A {
            protected:
                int state = 0;
            };
            
            class B: public A { };
    
            class C: public B { };
    
            class D: public C {
            public:
                void n(int x) { 
                    state = x + 2;
                }
            };
        };
    };
        
    auto main() -> int {
        VeryOuter::Outer::D d;
        d.n(3);
    }
  Test.java: |
    class VeryOuter {
        class Outer {
            class A {
                protected int state = 0;
            }

            class B extends A {
            }

            class C extends B {
            }

            class D extends C {
                public void n(int x) {
                    state = x + 2;
                }
            }
        }
    }

    public class Test {
        public static void main(String[] args) {
            var d = ((new VeryOuter()).new Outer()).new D();
            d.n(3);
        }
    }
  test.eo: |
    [] > test
      [] > very_outer
        [] > outer
          [] > a
            memory > state
          [] > b
            a > @
          [] > c
            b > @
          [] > d
            c > @
            [self x] > n
              x.add 2 > tmp
              self.state.write tmp > @
good:
  source.cpp: |
    class VeryOuter {
    public:
        class Outer {
        public:
            class A {
            protected:
                int state = 0;
            public:
                void setState(int x) { state = x; }
            };
            
            class B: public A { };
    
            class C: public B { };
    
            class D: public C {
            public:
                void n(int x) { 
                    int tmp = x + 2;
                    setState(tmp);
                }
            };
        };
    };
        
    auto main() -> int {
        VeryOuter::Outer::D d;
        d.n(3);
    }
  Test.java: |
    class VeryOuter {
        class Outer {
            class A {
                protected int state = 0;
                void setState(int x) { state = x; }
            }

            class B extends A {
            }

            class C extends B {
            }

            class D extends C {
                public void n(int x) {
                    int tmp = x + 2;
                    setState(tmp);
                }
            }
        }
    }

    public class Test {
        public static void main(String[] args) {
            var d = ((new VeryOuter()).new Outer()).new D();
            d.n(3);
        }
    }
  test.eo: |
    [] > test
      [] > very_outer
        [] > outer
          [] > a
            memory > state
            [self x] > get_state
              self.state.write x > @
          [] > b
            a > @
          [] > c
            b > @
          [] > d
            c > @
            [self x] > n
              x.add 2 > tmp
              self.get_state self tmp > @
