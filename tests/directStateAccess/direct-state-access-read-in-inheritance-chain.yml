title: Direct access(read) to the base class state in a chain of inheritance
description: >
  Here, direct access(read) to the base class state occurs through 
  the inheritance chain, in which the access to the field of the base class
  occurs in the last element of the inheritance chain.
features:
  - inheritance
  - encapsulation
  - method
bad:
  source.cpp: |
    #include <memory>
    
    class A {
    protected:
        int state = 0;
    };

    class B: public A { };

    class C : public B {
    public:
        auto n(int x) -> int {
            return state + x;
        }
    };

    auto main() -> int {
        auto c = std::make_unique<C>();
        c->n(3);
    }
  Test.java: |
    class A {
        protected int state = 0;
    }

    class B extends A { }

    class C extends B {
        public int n(int x) {
            return state + x;
        }
    }

    public class Test {
        public static void main(String[] args) {
            var c = new C();
            System.out.println(c.n(3));
        }
    }
  test.eo: |
    [] > test
      [] > a
        memory > state
      [] > b
        a > @
      [] > c
        b > @
        [self x] > n
          self.state.add x > @
good:
  source.cpp: |
    #include <memory>
    
    class A {
    protected:
        int state = 0;
    public:
        auto getState() { return state; }
    };

    class B: public A { };

    class C : public B {
    public:
        auto n(int x) -> int {
            return getState() + x;
        }
    };

    auto main() -> int {
        auto c = std::make_unique<C>();
        c->n(3);
    }
  Test.java: |
    class A {
        protected int state = 0;
        public int getState() { return state; }
    }

    class B extends A { }

    class C extends B {
        public int n(int x) {
            return getState() + x;
        }
    }

    public class Test {
        public static void main(String[] args) {
            var c = new C();
            System.out.println(c.n(3));
        }
    }
  test.eo: |
    [] > test
      [] > a
        memory > state
        [self] > get_state
          self.state > @
      [] > b
        a > @
      [] > c
        b > @
        [self x] > n
          self.get_state self > s
          s.add x > @
