title: Direct access(read) to the base class state in a chain of inheritance in nested classes
description: >
  Here, direct access(read) to the base class state occurs through 
  the inheritance chain, in which the access to the field of the base class
  occurs in the last element of the inheritance chain. The inheritance chain 
  is in the innermost element of the nested class chain.
features:
  - inheritance
  - encapsulation
  - method
bad:
  source.cpp: |
    class VeryOuter {
    public:
        class Outer {
        public:
            class A {
            protected:
                int state = 0;
            };
            
            class B: public A { };
    
            class C: public B { };
    
            class D: public C {
            public:
                auto n(int x) -> int {
                    return state + x;
                }
            };
        };
    };
        
    auto main() -> int {
        VeryOuter::Outer::D d;
        d.n(3);
    }
  Test.java: |
    class VeryOuter {
        class Outer {
            class A {
                protected int state = 0;
            }

            class B extends A {
            }

            class C extends B {
            }

            class D extends C {
                public int n(int x) {
                    return state + x;
                }
            }
        }
    }

    public class Test {
        public static void main(String[] args) {
            var d = ((new VeryOuter()).new Outer()).new D();
            System.out.println(d.n(3));
        }
    }
  test.eo: |
    [] > test
      [] > very_outer
        [] > outer
          [] > a
            memory > state
          [] > b
            a > @
          [] > c
            b > @
          [] > d
            c > @
            [self x] > n
              self.state.add x > @
good:
  source.cpp: |
    class VeryOuter {
    public:
        class Outer {
        public:
            class A {
            protected:
                int state = 0;
            public:
                auto getState() { return state; }
            };
            
            class B: public A { };
    
            class C: public B { };
    
            class D: public C {
            public:
                auto n(int x) -> int {
                    return getState() + x;
                }
            };
        };
    };
        
    auto main() -> int {
        VeryOuter::Outer::D d;
        d.n(3);
    }
  Test.java: |
    class VeryOuter {
        class Outer {
            class A {
                protected int state = 0;
                public int getState() { return state; }
            }

            class B extends A { }

            class C extends B { }

            class D extends C {
                public int n(int x) {
                    return getState() + x;
                }
            }
        }
    }

    public class Test {
        public static void main(String[] args) {
            var d = ((new VeryOuter()).new Outer()).new D();
            System.out.println(d.n(3));
        }
    }
  test.eo: |
    [] > test
      [] > very_outer
        [] > outer
          [] > a
            memory > state
            [self] > get_state
              self.state > @
          [] > b
            a > @
          [] > c
            b > @
          [] > d
            c > @
            [self x] > n
              self.get_state self > s
              s.add x > @
