title: The simple example of direct access(read) to the base class state
description: >
  Here, direct access(read) to the base class occurs in the descendant class
  directly through access to the field, and not through a method of the base class.
features:
  - inheritance
  - encapsulation
  - method
bad:
  source.cpp: |
    #include <memory>
    
    class A {
    protected:
        int state = 0;
    };

    class B : public A {
    public:
        auto n(int x) -> int {
            return state + x;
        }
    };

    auto main() -> int {
        auto b = std::make_unique<B>();
        b->n(3);
    }
  Test.java: |
    class A {
        protected int state = 0;
    }

    class B extends A {
        public int n(int x) {
            return state + x;
        }
    }

    public class Test {
        public static void main(String[] args) {
            var b = new B();
            System.out.println(b.n(3));
        }
    }
  test.eo: |
    [] > test
      [] > a
        memory > state
      [] > b
        a > @
        [self x] > n
          self.state.add x > @
  test.py: |
    class A:
        _state = 0


    class B(A):
        def n(self, x):
            return self._state + x


    if __name__ == "__main__":
        B().n(3)
good:
  source.cpp: |
    #include <memory>
    
    class A {
    protected:
        int state = 0;
    public:
        auto getState() { return state; }
    };

    class B : public A {
    public:
        auto n(int x) -> int {
            return getState() + x;
        }
    };

    auto main() -> int {
        auto b = std::make_unique<B>();
        b->n(3);
    }
  Test.java: |
    class A {
        protected int state = 0;
        public int getState() { return state; }
    };

    class B extends A {
        public int n(int x) {
            return this.getState() + x;
        }
    };

    public class Test {
        public static void main(String[] args) {
            var b = new B();
            System.out.println(b.n(3));
        }
    }
  test.eo: |
    [] > test
      [] > a
        memory > state
        [self] > get_state
          self.state > @
      [] > b
        a > @
        [self x] > n
          self.get_state self > s
          s.add x > @
  test.py: |
    class A:
        _state = 0
        
        def get_state(self):
            return self._state
    
    
    class B(A):
        def n(self, x):
            return self.get_state() + x
    
    
    if __name__ == "__main__":
        B().n(3)
