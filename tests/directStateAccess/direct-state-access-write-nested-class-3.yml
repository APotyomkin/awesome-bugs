title: Direct access(write) to the base class state in a chain of inheritance with nested state
description: >
  Here, direct access(write) to the base class state occurs through 
  the inheritance chain, in which the access to the field of the base class
  occurs in the last element of the inheritance chain. Base class state is
  deeply nested.
features:
  - inheritance
  - nested
  - encapsulation
  - method
bad:
  source.cpp: |
    class A {
    public:
        class InnerA {
        public:
            class VeryInnerA {
            protected:
                int state = 0;
            };
        };
    };
    
    class B: public A::InnerA::VeryInnerA { };
    
    class C: public B { };
    
    class D: C {
    public:
        void n(int x) { 
            state = x + 2;
        }
    };
    
    auto main() -> int {
        D d;
        d.n(3);
    }
  Test.java: |
    class A {
        class Inner {
            static class VeryInner {
                protected int state = 0;
            }
        }
    }

    class B extends A.Inner.VeryInner { }

    class C extends  B { }

    class D extends C {
        public void n(int x) {
            state = x + 2;
        }
    }

    public class Test {
        public static void main(String[] args) {
            var d = new D();
            d.n(3);
        }
    }
  test.eo: |
    [] > test
      [] > a
        [] > inner_a
          [] > very_inner_a
            memory > state
      [] > b
        a > @
      [] > c
        b > @
      [] > d
        c > @
        [self x] > n
          x.add 2 > tmp
          self.inner_a.very_inner_a.state.write tmp > @
good:
  source.cpp: |
    class A {
    public:
        class InnerA {
        public:
            class VeryInnerA {
            protected:
                int state = 0;
            public:
                void setState(int x) { state = x; }
            };
        };
    };
    
    class B: public A::InnerA::VeryInnerA { };
    
    class C: public B { };
    
    class D: C {
    public:
        void n(int x) { 
            int tmp = x + 2;
            setState(tmp);
        }
    };
    
    auto main() -> int {
        D d;
        d.n(3);
    }
  Test.java: |
    class A {
        class Inner {
            static class VeryInner {
                protected int state = 0;
                void setState(int x) { state = x; }
            }
        }
    }

    class B extends A.Inner.VeryInner { }

    class C extends  B { }

    class D extends C {
        public void n(int x) {
            int tmp = x + 2;
            setState(tmp);
        }
    }

    public class Test {
        public static void main(String[] args) {
            var d = new D();
            d.n(3);
        }
    }
  test.eo: |
    [] > test
      [] > a
        [] > inner_a
          [] > very_inner_a
            memory > state
            [self] > get_state
              self.state > @
      [] > b
        a > @
      [] > c
        b > @
      [] > d
        c > @
        [self x] > n
          x.add 2 > tmp
          self.inner_a.very_inner_a.get_state self tmp > @
