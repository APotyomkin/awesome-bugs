title: Direct access(read) to the base class state in a chain of nested classes
description: >
  Here, direct access(read) to the state of the base class occurs in the 
  innermost element of the chain of nested classes. In this case, both 
  the base and the inherited class are in the same inner class.
features:
  - inheritance
  - nested
  - encapsulation
  - method
bad:
  source.cpp: |
    class VeryOuter {
    public:
        class Outer {
        public:
            class A {
            protected:
                int state = 0;
            };
            class B: public A {
            public:
                auto n(int x) -> int {
                    return state + x;
                }
            };
        };
    };
     
    auto main() -> int {
        VeryOuter::Outer::B b;
        b.n(3);
    }
  Test.java: |
    class VeryOuter {
        class Outer {
            class A {
                protected int state = 0;
            }

            class B extends A {
                public int n(int x) {
                    return state + x;
                }
            }
        }
    }

    public class Test {
        public static void main(String[] args) {
            var d = ((new VeryOuter()).new Outer()).new B();
            System.out.println(d.n(3));
        }
    }
  test.eo: |
    [] > test
      [] > very_outer
        [] > outer
          [] > a
            memory > state
          [] > b
            a > @
            [self x] > n
              self.state.add x > @
good:
  source.cpp: |
    class VeryOuter {
    public:
        class Outer {
        public:
            class A {
            protected:
                int state = 0;
            public:
                auto getState() {  
                    return state; 
                }
            };
            class B: public A {
            public:
                auto n(int x) -> int {
                    return getState() + x;
                }
            };
        };
    };
    
    auto main() -> int {
        VeryOuter::Outer::B b;
        b.n(3);
    }
  Test.java: |
    class VeryOuter {
        class Outer {
            class A {
                protected int state = 0;
                public int getState() { return state; }
            }

            class B extends A {
                public int n(int x) {
                    return getState() + x;
                }
            }
        }
    }

    public class Test {
        public static void main(String[] args) {
            var d = ((new VeryOuter()).new Outer()).new B();
            System.out.println(d.n(3));
        }
    }
  test.eo: |
    [] > test
      [] > very_outer
        [] > outer
          [] > a
            memory > state
            [self x] > get_state
              self.state.write x > @
          [] > b
            a > @
            [self x] > n
              self.get_state self > s
              s.add x > @
