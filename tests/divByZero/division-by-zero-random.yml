title: Division by zero in random branching
description: >
  Division by zero occurs only if a rand function yields zero. This is
  an example of an error that doesn't show itself at once but is possible.
features:
  - object
  - method
language: cpp
bad:
  source.cpp: |
    #include <iostream>
    #include <random>
    #include <memory>

    class A {
    private:
        int value;
    public:
        void setValue(int v) { value = v; }
        auto doSomething(int v) const -> int {
            return v / value;
        }
    };

    auto main() -> int {
        auto a = std::make_unique<A>();
        std::random_device dev;
        std::mt19937 rng(dev());
        std::uniform_int_distribution<std::mt19937::result_type> dist(0, 10);
        uint32_t randomNumber = dist(rng);
        a->setValue(randomNumber);
        std::cout << a->doSomething(10);
    }
  Test.java: |
    import java.util.Random;

    class A {
        private int value;
        public int getValue() { return value; }
        public void setValue(int v) { value = v; }
        public int doSomething(int v) {
            return v / value;
        }
    }

    public class Test {
        public static void main(String[] args) {
            A a = new A();
            Random rand = new Random();
            int randomNumber = rand.nextInt();
            a.setValue(randomNumber);
            System.out.println(a.doSomething(10));
        }
    }
  test.eo: |
    [] > test
      [] > base
        memory > value
        [self v] > setValue
          value.write v > @
        [self v] > doSomething
          v.div value > @
    
      [] > derived
        base > b
        [self v] > n
          random.as-int > r
          seq > @
            b.setValue b r
            b.doSomething b v
good:
  source.cpp: |
    #include <iostream>
    #include <random>
    #include <memory>

    class A {
    private:
        int value;
    public:
        void setValue(int v) { value = v; }
        auto doSomething(int v) const -> int {
            return v / value;
        }
    };

    auto main() -> int {
        auto a = std::make_unique<A>();
        std::random_device dev;
        std::mt19937 rng(dev());
        std::uniform_int_distribution<std::mt19937::result_type> dist(0, 10);
        uint32_t randomNumber = dist(rng);
        if (randomNumber % 3 == 10) {
            a->setValue(randomNumber);
            std::cout << a->doSomething(10);
        }
    }
  Test.java: |
    import java.util.Random;

    class A {
        private int value;
        public int getValue() { return value; }
        public void setValue(int v) { value = v; }
        public int doSomething(int v) {
            return v / value;
        }
    }

    public class Test {
        public static void main(String[] args) {
            A a = new A();
            Random rand = new Random();
            int randomNumber = rand.nextInt();
            if (randomNumber % 3 == 10) {
                a.setValue(randomNumber);
                System.out.println(a.doSomething(10));
            }
        }
    }
  test.eo: |
    [] > test
      [] > base
        memory > value
        [self v] > setValue
          value.write v > @
        [self v] > doSomething
          v.div value > @
    
      [] > derived
        base > b
        [self v] > n
          random.as-int > r
          r.mod 3 > remainder
          if. > @
            remainder.eq 10
            seq > @
              b.setValue b r
              b.doSomething b v
            r
