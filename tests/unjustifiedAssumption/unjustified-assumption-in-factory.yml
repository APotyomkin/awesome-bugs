title: The unjustified assumption in factory pattern
description: >
  Here, the defect manifests itself in the context
  of the factory pattern (the base class is the product
  of the factory)
features:
  - inheritance
  - overriding
  - method
  - polymorphism
bad:
  source.cpp: |
    #include <iostream>
    #include <cassert>

    class parentFactory {
    public:
        class getParent {
        public:
            virtual int f(int x) {
                int t = x - 5;
                assert(t > 0);
                return x;
            }
            virtual int g(int y) {
                return f(y);
            }
            virtual int h(int z) {
                return z;
            }
            virtual ~getParent() = default;
        };
    };

    class child : public parentFactory::getParent {
    public:
        virtual int f(int y) override {
            return y;
        }
        virtual int h(int z) override {
            return g(z);
        }
    };

     auto main() -> int {
            int x = 10;

            auto* p = new parentFactory::getParent();
            p->g(x);
            x -= 5;
            p->h(x);
            delete p;

            p = new child();
            p->g(x);
            p->h(x);
            delete p;
      }
  Test.java: |
    class ParentFactory {
        static class GetParent {
            public int f(int x) {
                int t = x - 5;
                assert (t > 0);
                return x;
            }

            public int g(int y) {
                return this.f(y);
            }

            public int h(int z) {
                return z;
            }
        }
    }

    class Child extends ParentFactory.GetParent {
        @Override
        public int f(int y) {
            return y;
        }
        @Override
        public int h(int z) {
            return this.g(z);
        }
    };

    public class Test {
        public static void main(String[] args) {
            int x = 10;

            var p = new ParentFactory.GetParent();
            p.g(x);
            x -= 5;
            p.h(x);

            p = new Child();
            p.g(x);
            p.h(x);
        }
    }
  test.eo: |
    [] > test
      [] > base_factory
        [] > get_base
          [self x] > f
            x.sub 5 > t
            seq > @
              assert (0.less t)
              x
          [self y] > g
            self.f self y > @
          [self z] > h
            z > @
      [] > derived
        base_factory.get_base > @
        [self y] > f
          y > @
        [self z] > h
          self.g self z > @
good:
  source.cpp: |
    #include <iostream>
    #include <cassert>

    class parentFactory {
    public:
        class getParent {
        public:
            virtual int f(int x) {
                int t = x - 5;
                assert(t > 0);
                return x;
            }
            virtual int g(int y) {
                return f(y);
            }
            virtual int h(int z) {
                return z;
            }
            virtual ~getParent() = default;
        };
    };

    class child : public parentFactory::getParent {
    public:
        virtual int h(int z) override {
            return g(z);
        }
    };

     auto main() -> int {
            int x = 10;

            auto* p = new parentFactory::getParent();
            p->g(x);
            x -= 5;
            p->h(x);
            delete p;

            p = new child();
            p->g(x);
            p->h(x);
            delete p;
    }
  Test.java: |
    class ParentFactory {
        static class GetParent {
            public int f(int x) {
                int t = x - 5;
                assert (t > 0);
                return x;
            }

            public int g(int y) {
                return this.f(y);
            }

            public int h(int z) {
                return z;
            }
        }
    }

    class Child extends ParentFactory.GetParent {
        @Override
        public int h(int z) {
            return this.g(z);
        }
    };

    public class Test {
        public static void main(String[] args) {
            int x = 10;

            var p = new ParentFactory.GetParent();
            p.g(x);
            x -= 5;
            p.h(x);

            p = new Child();
            p.g(x);
            p.h(x);
        }
    }
  test.eo: |
    [] > test
      [] > base_factory
        [] > get_base
          [self x] > f
            x.sub 5 > t
            seq > @
              assert (0.less t)
              x
          [self y] > g
            self.f self y > @
          [self z] > h
            z > @
      [] > derived
        base_factory.get_base > @
        [self z] > h
          self.g self z > @
