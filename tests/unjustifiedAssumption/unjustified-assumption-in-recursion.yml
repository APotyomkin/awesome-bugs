title: Unjustified assumption in presence of recursion
description: >
  In this test case the problem manifests due to changes in preconditions
  of method n after redefinition. The redefinition also causes the methods
  to become mutually recursive.
features:
  - inheritance
  - overriding
  - method
  - polymorphism
bad:
  source.cpp: |
    #include <iostream>
    #include <cassert>

    class Base {
    public:
        virtual int n(int v) {
            assert (v < 10);
            return 2;
        }
        virtual int m(int v) {
            return n(v);
        }

        virtual ~Base() = default;
    };

    class Derived : public Base {
    public:
        virtual int n(int v) override {
            return m(v);
        }
    };

    auto main() -> int {
        int x = 10;

        auto* p = new Base();
        p->m(x);
        x -= 5;
        p->n(x);
        delete p;

        p = new Derived();
        p->m(x);
        p->n(x);
        delete p;
    }
  Test.java: |
    class Base {
        public int n(int v) {
            assert v < 10;
            return 2;
        }
        public int m(int v) {
            return n(v);
        }
    };

    class Derived extends Base {
        @Override
        public int n(int v) {
            return m(v);
        }
    };

    public class Test {
        public static void main(String[] args) {
            int x = 10;

            Base p = new Base();
            p.m(x);
            x -= 5;
            p.n(x);

            p = new Derived();
            p.m(x);
            p.n(x);
        }
    }
  test.eo: |
    [] > test
      [] > base
        [self v] > n
          seq > @
            assert (v.less 10)
            2
        [self v] > m
          self.n self v > @
      [] > derived
        base > @
        [self v] > n
          self.m self v > @
  test.py: |
    class Base:
        def n(self, v):
            assert v < 10
            return 2

        def m(self, v):
            return self.n(v)


    class Derived(Base):
        def n(self, v):
            return self.m(v)


    if __name__ == "__main__":
        a = 10

        p = Base()
        p.m(a)
        a -= 5
        p.n(a)

        p = Derived()
        p.m(a)
        p.n(a)
good:
  source.cpp: |
    #include <iostream>
    #include <cassert>

    class Base {
    public:
        virtual int n(int v) {
            assert (v < 10);
            return 2;
        }
        virtual int m(int v) {
            return n(v);
        }

        virtual ~Base() = default;
    };

    class Derived : public Base {
    public:
        virtual int n(int v) override {
            assert (v < 10);
            return v;
        }
    };

    auto main() -> int {
        int x = 10;

        auto* p = new Base();
        p->m(x);
        x -= 5;
        p->n(x);
        delete p;

        p = new Derived();
        p->m(x);
        p->n(x);
        delete p;
    }
  Test.java: |
    class Base {
        public int n(int v) {
            assert v < 10;
            return 2;
        }
        public int m(int v) {
            return n(v);
        }
    };

    class Derived extends Base {
        @Override
        public int n(int v) {
            assert v < 10;
            return v;
        }
    };

    public class Test {
        public static void main(String[] args) {
            int x = 10;

            Base p = new Base();
            p.m(x);
            x -= 5;
            p.n(x);

            p = new Derived();
            p.m(x);
            p.n(x);
        }
    }
  test.eo: |
    [] > test
      [] > base
        [self v] > n
          seq > @
            assert (v.less 10)
            2
        [self v] > m
          self.n self v > @
      [] > derived
        base > @
        [self v] > n
          seq > @
            assert (v.less 10)
            v
  test.py: |
    class Base:
        def n(self, v):
            assert v < 10
            return 2
    
        def m(self, v):
            return self.n(v)


    class Derived(Base):
        def n(self, v):
            assert v < 10
            return v
    
    
    if __name__ == "__main__":
        a = 10
    
        p = Base()
        p.m(a)
        a -= 5
        p.n(a)
    
        p = Derived()
        p.m(a)
        p.n(a)
