title: Mutual recursion in a chain of inheritance with nested base class
description: >
  Mutual recursion occurs in the inheritance chain when overriding
  a method m in the last inherited class in the chain. The base class
  is in the innermost element of the nested class chain.
features:
  - inheritance
  - overriding
  - method
  - polymorphism
bad:
  source.cpp: |
    #include <memory>

    class VeryOuter {
    public:
        class Outer {
        public:
            class Base {
            private:
                int x = 0;
            public:
                Base() = default;
                virtual ~Base() = default;

                virtual void n(int v) {
                    this->x = v;
                }
                void m(int v) {
                    this->n(v);
                }
            };
        };
    };

    class Derived : public VeryOuter::Outer::Base { };

    class DerivedAgain : public Derived {
    public:
        void n(int v) override {
            this->m(v);
        }
    };

    auto main() -> int {
        std::unique_ptr<VeryOuter::Outer::Base> d = std::make_unique<DerivedAgain>();
        d->m(12);
    }
  Test.java: |
    class VeryOuter {
        class Outer {
            static class Base {
                private int x = 0;
                public int getX() { return x; }
                public void n(int v) {
                    x = v;
                }
                public void m(int v) {
                    this.n(v);
                }
            }
        }
    }

    class Derived extends VeryOuter.Outer.Base { }

    class DerivedAgain extends Derived {
        @Override
        public void n(int v) {
            this.m(v);
        }
    }

    public class Test {
        public static void main(String[] args) {
            VeryOuter.Outer.Base d = new DerivedAgain();
            d.m(12);
        }
    }
  test.eo: |
    [] > test
      [] > very_outer
        [] > outer
          [] > base
            memory > x
            [self v] > n
              x.write v > @
            [self v] > m
              self.n self v > @
      [] > derived
        very_outer.outer.base > @
      [] > derived_again
        derived > @
        [self v] > n
          self.m self v > @
good:
  source.cpp: |
    #include <memory>

    class VeryOuter {
    public:
        class Outer {
        public:
            class Base {
            private:
                int x = 0;
            public:
                Base() = default;
                virtual ~Base() = default;

                virtual void n(int v) {
                    this->x = v;
                }
                void m(int v) {
                    this->n(v);
                }
            };
        };
    };

    class Derived : public VeryOuter::Outer::Base { };

    class DerivedAgain : public Derived {
    public:
        void n1(int v) {
            this->m(v);
        }
    };

    auto main() -> int {
        std::unique_ptr<VeryOuter::Outer::Base> d = std::make_unique<DerivedAgain>();
        d->m(12);
    }
  Test.java: |
    class VeryOuter {
        class Outer {
            static class Base {
                private int x = 0;
                public int getX() { return x; }
                public void n(int v) {
                    x = v;
                }
                public void m(int v) {
                    this.n(v);
                }
            }
        }
    }

    class Derived extends VeryOuter.Outer.Base { }

    class DerivedAgain extends Derived {
        public void n1(int v) {
            this.m(v);
        }
    }

    public class Test {
        public static void main(String[] args) {
            VeryOuter.Outer.Base d = new DerivedAgain();
            d.m(12);
        }
    }
  test.eo: |
    [] > test
      [] > very_outer
        [] > outer
          [] > base
            memory > x
            [self v] > n
              x.write v > @
            [self v] > m
              self.n self v > @
      [] > derived
        very_outer.outer.base > @
      [] > derived_again
        derived > @
        [self v] > n1
          self.m self v > @
