title: The base mutual recursion case example
description: >
  One of the methods of the base class overrides in the derived class
  and results in a mutual recursion
features:
  - inheritance
  - overriding
  - method
  - polymorphism
language: cpp
bad:
  source.cpp: |
    #include <memory>

    class Base {
    private:
        int x = 0;
    public:
        Base() = default;
        virtual ~Base() = default;

        virtual void n(int v) {
            this->x = v;
        }
        void m(int v) {
            this->n(v);
        }
    };

    class Derived : public Base {
    public:
        void n(int v) override {
            this->m(v);
        }
    };

    auto main() -> int {
        std::unique_ptr<Base> derivedInstance = std::make_unique<Derived>();
        derivedInstance->m(10);
    }
  Test.java: |
    class Base {
        private int x = 0;
        public int getX() { return x; }
        public void n(int v) {
            x = v;
        }
        public void m(int v) {
            n(v);
        }
    }

    class Derived extends Base {
        @Override
        public void n(int v) {
            m(v);
        }
    }

    public class Test {
        public static void main(String[] args) {
            Base derivedInstance = new Derived();
            derivedInstance.m(10);
        }
    }
  test.eo: |
    [] > test
      [] > base
        memory > x
        [self v] > n
          x.write v > @
        [self v] > m
          self.n self v > @
      [] > derived
        base > @
        [self v] > n
          self.m self v > @
good:
  source.cpp: |
    #include <memory>

    class Base {
    private:
        int x = 0;
    public:
        Base() = default;
        virtual ~Base() = default;

        void n(int v) {
            this->x = v;
        }
        void m(int v) {
            this->n(v);
        }
    };

    class Derived : public Base {
    public:
        void n1(int v) {
            this->m(v);
        }
    };

    auto main() -> int {
        std::unique_ptr<Base> derivedInstance = std::make_unique<Derived>();
        derivedInstance->m(10);
    }
  Test.java: |
    class Base {
        private int x = 0;
        public int getX() { return x; }
        public void n(int v) {
            x = v;
        }
        public void m(int v) {
            n(v);
        }
    }

    class Derived extends Base {
        public void n1(int v) {
            m(v);
        }
    }

    public class Test {
        public static void main(String[] args) {
            Base derivedInstance = new Derived();
            derivedInstance.m(10);
        }
    }
  test.eo: |
    [] > test
      [] > base
        memory > x
        [self v] > n
          x.write v > @
        [self v] > m
          self.n self v > @
      [] > derived
        base > @
        [self v] > n1
          self.m self v > @
