title: Mutual recursion in if branching
description: >
  Mutual recursion occurs only if the n method calls twice. This is
  an example of an error that doesn't show itself at once but is possible.
features:
  - inheritance
  - overriding
  - method
  - polymorphism
bad:
  source.cpp: |
    #include <memory>

    class Base {
    private:
        int x = 0;
    public:
        Base() = default;
        virtual ~Base() = default;

        virtual void n() {
            this->x = 0;
        }
        void m() {
            this->n();
        }
        void incrX() {
            x++;
        }
        auto getX() const -> int {
            return x;
        }
    };

    class Derived : public Base {
    public:
        void n() override {
            if (this->getX() == 0) {
                this->incrX();
            }
            else {
                this->m();
            }
        }
    };

    auto main() -> int {
        std::unique_ptr<Base> derivedInstance = std::make_unique<Derived>();
        derivedInstance->n();
        derivedInstance->m();
    }
  Test.java: |
    class Base {
        private int x = 0;
        public int getX() { return x; }
        public void n() {
            x = 0;
        }
        public void m() {
            n();
        }
        public void incrX() {
            x++;
        }
    }

    class Derived extends Base {
        @Override
        public void n() {
            if (getX() == 0) {
                incrX();
            }
            else {
                m();
            }
        }
    }

    public class Test {
        public static void main(String[] args) {
            Base derivedInstance = new Derived();
            derivedInstance.n();
            derivedInstance.m();
        }
    }
  test.eo: |
    [] > test
      [] > base
        memory > x
        [self] > n
          x.write 0 > @
        [self] > m
          self.n self > @
      [] > derived
        base > @
        base.x > x
        [self] > n
          if. > @
            x.eq 0
            x.write (x.add 1)
            self.m self
  test.py: |
    class Base:
        __x = 0

        def n(self):
            self.__x = 0

        def m(self):
            self.n()

        def incr_x(self):
            self.__x += 1

        def get_x(self):
            return self.__x


    class Derived(Base):
        def n(self):
            if self.get_x() == 0:
                self.incr_x()
            else:
                self.m()


    if __name__ == "__main__":
        derivedInstance = Derived()
        derivedInstance.n()
        derivedInstance.n()
good:
  source.cpp: |
    #include <memory>

    class Base {
    private:
        int x = 0;
    public:
        Base() = default;
        virtual ~Base() = default;

        virtual void n() {
            this->x = 0;
        }
        void m() {
            this->n();
        }
        void decrX() {
            x--;
        }
        auto getX() const -> int {
            return x;
        }
    };

    class Derived : public Base {
    public:
        void n() override {
            if (this->getX() == 1) {
                this->m();
            }
            else {
                this->decrX();
            }
        }
    };

    auto main() -> int {
        std::unique_ptr<Base> derivedInstance = std::make_unique<Derived>();
        derivedInstance->n();
        derivedInstance->m();
    }
  Test.java: |
    class Base {
        private int x = 0;
        public int getX() { return x; }
        public void n() {
            x = 0;
        }
        public void m() {
            n();
        }
        public void decrX() {
            x--;
        }
    }

    class Derived extends Base {
        @Override
        public void n() {
            if (getX() == 1) {
                m();
            }
            else {
                decrX();
            }
        }
    }

    public class Test {
        public static void main(String[] args) {
            Base derivedInstance = new Derived();
            derivedInstance.n();
            derivedInstance.m();
        }
    }
  test.eo: |
    [] > test
      [] > base
        memory > x
        [self] > n
          x.write 0 > @
        [self] > m
          self.n self > @
      [] > derived
        base > @
        base.x > x
        [self] > n
          if. > @
            x.eq 1
            self.m self
            x.write (x.sub 1)
  test.py: |
    class Base:
        __x = 0
    
        def n(self):
            self.__x = 0
    
        def m(self):
            self.n()
    
        def decr_x(self):
            self.__x -= 1
    
        def get_x(self):
            return self.__x
    
    
    class Derived(Base):
        def n(self):
            if self.get_x() == 1:
                self.m()
            else:
                self.decr_x()
    
    
    if __name__ == "__main__":
        derivedInstance = Derived()
        derivedInstance.n()
        derivedInstance.n()
