title: Mutual recursion in if branching
description: >
  Mutual recursion occurs only if the n method calls twice. This is
  an example of an error that doesn't show itself at once but is possible.
features:
  - inheritance
  - overriding
  - method
  - polymorphism
language: cpp
bad:
  source.cpp: |
    #include <memory>

    class Base {
    private:
        int x = 0;
    public:
        Base() = default;
        virtual ~Base() = default;

        virtual void n() {
            this->x = 0;
        }
        void m() {
            this->n();
        }
        void incrX() {
            x++;
        }
        auto getX() const -> int {
            return x;
        }
    };

    class Derived : public Base {
    public:
        void n() override {
            if (this->getX() == 0) {
                this->incrX();
            }
            else {
                this->m();
            }
        }
    };

    auto main() -> int {
        std::unique_ptr<Base> derivedInstance = std::make_unique<Derived>();
        derivedInstance->n();
        derivedInstance->m();
    }
  test.eo: |
    [] > test
      [] > derived
        test.base > @
        test.base.x > x
        [self] > n
          if. > @
            x.eq 0
            x.write (x.add 1)
            self.m self

      [] > base
        memory > x
        [self] > n
          x.write 0 > @
        [self] > m
          self.n self > @
good:
  source.cpp: |
    #include <memory>

    class Base {
    private:
        int x = 0;
    public:
        Base() = default;
        virtual ~Base() = default;

        virtual void n() {
            this->x = 0;
        }
        void m() {
            this->n();
        }
        void decrX() {
            x--;
        }
        auto getX() const -> int {
            return x;
        }
    };

    class Derived : public Base {
    public:
        void n() override {
            if (this->getX() == 1) {
                this->m();
            }
            else {
                this->decrX();
            }
        }
    };

    auto main() -> int {
        std::unique_ptr<Base> derivedInstance = std::make_unique<Derived>();
        derivedInstance->n();
        derivedInstance->m();
    }
  test.eo: |
    [] > test
      [] > derived
        test.base > @
        test.base.x > x
        [self] > n
          if. > @
            x.eq 1
            self.m self
            x.write (x.sub 1)

      [] > base
        memory > x
        [self] > n
          x.write 0 > @
        [self] > m
          self.n self > @
