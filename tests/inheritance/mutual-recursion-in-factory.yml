title: Mutual recursion in factory pattern
description: >
  Mutual recursion occurs in overriding one of the methods of the base class.
  The base class is a product of factory BaseFactory
features:
  - inheritance
  - overriding
  - method
language: cpp
bad:
  source.cpp: |
    class BaseFactory {
    public:
        class GetBase {
        private:
            int x = 0;
        public:
            GetBase() = default;
            virtual ~GetBase() = default;

            virtual void n(int v) {
                this->x = v;
            }
            void m(int v) {
                this->n(v);
            }
        };
    };

    class Derived : public BaseFactory::GetBase {
    public:
        void n(int v) override {
            this->m(v);
        }
    };

    auto main() -> int {
        Derived derivedInstance;
        derivedInstance.m(12);
    }
  test.eo: |
    [] > test
      [] > base_factory
        [] > get_base
          memory > x
          [self v] > n
            x.write v > @
          [self v] > m
            self.n self v > @

      [] > derived
        test.base_factory.get_base > @
        [self v] > n
          self.m self v > @
good:
  source.cpp: |
    class BaseFactory {
    public:
        class GetBase {
        private:
            int x = 0;
        public:
            GetBase() = default;
            virtual ~GetBase() = default;

            void n(int v) {
                this->x = v;
            }
            void m(int v) {
                this->n(v);
            }
        };
    };

    class Derived : public BaseFactory::GetBase {
    public:
        void n(int v) {
            this->m(v);
        }
    };

    auto main() -> int {
        Derived derivedInstance;
        derivedInstance.m(12);
    }
  test.eo: |
    [] > test
      [] > base_factory
        [] > get_base
          memory > x
          [self v] > n
            x.write v > @
          [self v] > m
            self.n self v > @

      [] > derived
        test.base_factory.get_base > @
        [self v] > n1
          self.m self v > @
