title: Mutual recursion with a nested base class
description: >
  One of the methods of the base class overrides in the derived class
  and results in a mutual recursion. The base class is in the innermost
  element of the nested class chain.
features:
  - inheritance
  - nested
  - method
bad:
  source.cpp: |
    class VeryOuter {
    public:
        class Outer {
        public:
            class Base {
            private:
                int x = 0;
            public:
                Base() = default;
                virtual ~Base() = default;

                virtual void n(int v) {
                    this->x = v;
                }
                void m(int v) {
                    this->n(v);
                }
            };
        };
    };

    class Derived : public VeryOuter::Outer::Base {
    public:
        void n(int v) override {
            this->m(v);
        }
    };

    auto main() -> int {
        Derived d;
        d.n(3);
    }
  Test.java: |
    class VeryOuter {
        class Outer {
            static class Base {
                private int x = 0;
                public int getX() { return x; }
                public void n(int v) {
                    x = v;
                }
                public void m(int v) {
                    this.n(v);
                }
            }
        }
    }

    class Derived extends VeryOuter.Outer.Base {
        @Override
        public void n(int v) {
            this.m(v);
        }
    }

    public class Test {
        public static void main(String[] args) {
            VeryOuter.Outer.Base d = new Derived();
            d.n(3);
        }
    }
  test.eo: |
    [] > test
      [] > very_outer
        [] > outer
          [] > base
            memory > x
            [self v] > n
              x.write v > @
            [self v] > m
              self.n self v > @
      [] > derived
        very_outer.outer.base > @
        [self v] > n
          self.m self v > @
good:
  source.cpp: |
    class VeryOuter {
    public:
        class Outer {
        public:
            class Base {
            private:
                int x = 0;
            public:
                Base() = default;
                virtual ~Base() = default;

                virtual void n(int v) {
                    this->x = v;
                }
                void m(int v) {
                    this->n(v);
                }
            };
        };
    };

    class Derived : public VeryOuter::Outer::Base {
    public:
        void n1(int v) {
            this->m(v);
        }
    };

    auto main() -> int {
        Derived d;
        d.n(3);
    }
  Test.java: |
    class VeryOuter {
        class Outer {
            static class Base {
                private int x = 0;
                public int getX() { return x; }
                public void n(int v) {
                    x = v;
                }
                public void m(int v) {
                    this.n(v);
                }
            }
        }
    }
  
    class Derived extends VeryOuter.Outer.Base {
        public void n1(int v) {
            this.m(v);
        }
    }
  
    public class Test {
        public static void main(String[] args) {
            VeryOuter.Outer.Base d = new Derived();
            d.n(3);
        }
    }
  test.eo: |
    [] > test
      [] > very_outer
        [] > outer
          [] > base
            memory > x
            [self v] > n
              x.write v > @
            [self v] > m
              self.n self v > @
      [] > derived
        very_outer.outer.base > @
        [self v] > n1
          self.m self v > @
