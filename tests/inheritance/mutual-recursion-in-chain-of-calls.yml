title: Mutual recursion in a chain of calls
description: >
  Mutual recursion occurs in the chain of calls. After overriding method n
  we have such recursive call chain: l -> (m -> o -> n -> m)
features:
  - inheritance
  - overriding
  - method
bad:
  source.cpp: |
    class Base {
    private:
        int x = 0;
    public:
        Base() = default;
        virtual ~Base() = default;

        virtual void n(int v) {
            this->x = v;
        }
        void o(int v) {
            this->n(v);
        }
        void m(int v) {
            this->o(v);
        }
    };

    class Derived : public Base {
    public:
        void n(int v) override {
            this->m(v);
        }
        void l(int v) {
            this->n(v);
        }
    };

    auto main() -> int {
        Derived derivedInstance;
        derivedInstance.l(10);
    }
  Test.java: |
    class Base {
        private int x = 0;
        public int getX() { return x; }
        public void n(int v) {
            x = v;
        }
        public void o(int v) {
            this.n(v);
        }
        public void m(int v) { 
            this.o(v); 
        }
    }

    class Derived extends Base {
        public void n(int v) {
            this.m(v);
        }
        public void l(int v) {
            this.n(v);
        }
    }

    public class Test {
        public static void main(String[] args) {
            Derived derivedInstance = new Derived();
            derivedInstance.l(10);
        }
    }
  test.eo: |
    [] > test
      [] > base
        memory > x
        [self v] > n
          x.write v > @
        [self v] > o
          self.n self v > @
        [self v] > m
          self.o self v > @
      [] > derived
        base > @
        [self v] > n
          self.m self v > @
        [self v] > l
          self.n self v > @
  test.py: |
    class Base:
        __x = 0

        def n(self, v):
            self.__x = v

        def o(self, v):
            self.n(v)

        def m(self, v):
            self.o(v)


    class Derived(Base):
        def n(self, v):
            self.m(v)

        def k(self, v):
            self.n(v)


    if __name__ == "__main__":
        print(Derived().k(12))
good:
  source.cpp: |
    class Base {
    private:
        int x = 0;
    public:
        Base() = default;
        virtual ~Base() = default;

        void n(int v) {
            this->x = v;
        }
        void o(int v) {
            this->n(v);
        }
        void m(int v) {
            this->o(v);
        }
    };

    class Derived : public Base {
    public:
        void n(int v) {
            this->m(v);
        }
        void l(int v) {
            this->n(v);
        }
    };

    auto main() -> int {
        Derived derivedInstance;
        derivedInstance.l(10);
    }
  Test.java: |
    class Base {
        private int x = 0;
        public int getX() { return x; }
        public void n(int v) {
            x = v;
        }
        public void o(int v) {
            this.n(v);
        }
        public void m(int v) {
            this.o(v);
        }
    }

    class Derived extends Base {
        public void n1(int v) {
            this.m(v);
        }
        public void l(int v) {
            this.n(v);
        }
    }

    public class Test {
        public static void main(String[] args) {
            Derived derivedInstance = new Derived();
            derivedInstance.l(10);
        }
    }
  test.eo: |
    [] > test
      [] > base
        memory > x
        [self v] > n
          x.write v > @
        [self v] > o
          self.n self v > @
        [self v] > m
          self.o self v > @
      [] > derived
        base > @
        [self v] > n1
          self.m self v > @
        [self v] > l
          self.n self v > @
  test.py: |
    class Base:
        __x = 0

        def n(self, v):
            self.__x = v

        def o(self, v):
            self.n(v)

        def m(self, v):
            self.o(v)


    class Derived(Base):
        def n1(self, v):
            self.m(v)

        def k(self, v):
            self.n(v)


    if __name__ == "__main__":
        print(Derived().k(12))