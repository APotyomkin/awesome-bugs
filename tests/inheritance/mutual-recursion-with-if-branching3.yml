title: Mutual recursion in if branching
description: >
  The occurrence of mutual recursion depends on the argument. This is
  an example of an error that doesn't show itself at once but is possible.
features:
  - inheritance
  - overriding
  - method
  - polymorphism
language: cpp
bad:
  source.cpp: |
    #include <memory>

    class Base {
    private:
        int x = 0;
    public:
        Base() = default;
        virtual ~Base() = default;

        virtual void n(int v) {
            this->x = v;
        }
        void m(int v) {
            this->n(v);
        }
        void incrX() {
            x++;
        }
        auto getX() const -> int {
            return x;
        }
    };

    class Derived : public Base {
    public:
        void n(int v) override {
            if (this->getX() < v) {
                this->m(v);
            }
            else {
                this->incrX();
            }
        }
    };

    auto main() -> int {
        std::unique_ptr<Base> derivedInstance = std::make_unique<Derived>();
        derivedInstance->n(100);
    }
  Test.java: |
    class Base {
        private int x = 0;
        public int getX() { return x; }
        public void n(int v) {
            x = v;
        }
        public void m(int v) {
            n(v);
        }
        public void incrX() {
            x++;
        }
    }

    class Derived extends Base {
        public void n(int v) {
            if (getX() < v) {
                m(v);
            }
            else {
                incrX();
            }
        }
    }

    public class Test {
        public static void main(String[] args) {
            Base derivedInstance = new Derived();
            derivedInstance.n(10);
        }
    }
  test.eo: |
    [] > test
      [] > base
        memory > x
        [self v] > n
          x.write v > @
        [self v] > m
          self.n self v > @
      [] > derived
        base > @
        base.x > x
        [self v] > n
          if. > @
            x.less v
            self.m self
            x.write (x.add 1)
good:
  source.cpp: |
    #include <memory>

    class Base {
    private:
        int x = 0;
    public:
        Base() = default;
        virtual ~Base() = default;

        virtual void n(int v) {
            this->x = v;
        }
        void m(int v) {
            this->x++;
            this->n(v);
        }
        void incrX() {
            x++;
        }
        auto getX() const -> int {
            return x;
        }
    };

    class Derived : public Base {
    public:
        void n(int v) override {
            if (this->getX() < v) {
                this->m(v);
            }
            else {
                this->incrX();
            }
        }
    };

    auto main() -> int {
        std::unique_ptr<Base> derivedInstance = std::make_unique<Derived>();
        derivedInstance->n(100);
    }
  Test.java: |
    class Base {
        private int x = 0;
        public int getX() { return x; }
        public void n(int v) {
            x = v;
        }
        public void m(int v) {
            x++;
            n(v);
        }
        public void incrX() {
            x++;
        }
    }

    class Derived extends Base {
        public void n(int v) {
            if (getX() < v) {
                m(v);
            }
            else {
                incrX();
            }
        }
    }

    public class Test {
        public static void main(String[] args) {
            Base derivedInstance = new Derived();
            derivedInstance.n(10);
        }
    }
  test.eo: |
    [] > test
      [] > base
        memory > x
        [self v] > n
          x.write v > @
        [self v] > m
          seq > @
            x.write (x.add 1)
            self.n self v
      [] > derived
        base > @
        base.x > x
        [self v] > n
          if. > @
            x.less v
            self.m self
            x.write (x.add 1)
